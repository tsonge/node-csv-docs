{"componentChunkName":"component---src-templates-page-js","path":"/stringify/options/columns/","result":{"data":{"page":{"html":"<h1 id=\"option-code-classlanguage-textcolumnscode\" style=\"position:relative;\"><a href=\"#option-code-classlanguage-textcolumnscode\" aria-label=\"option code classlanguage textcolumnscode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Option <code class=\"language-text\">columns</code></h1>\n<div class=\"toc\">\n<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"#toc\" aria-hidden class=\"anchor\"></a>Table of Contents</h2>\n<ul>\n<li><a href=\"#undefined-properties\">Undefined properties</a></li>\n</ul>\n</div>\n<p>The associate value with the <code class=\"language-text\">column</code> option may come in different flavours: an int, an array or an object. Consider the <a href=\"https://github.com/adaltas/node-csv-stringify/blob/master/test/option.columns.coffee\">tests</a> as an exhaustive source of inspiration, examples and supported features.</p>\n<p>Once normalised, the final columns option is an array defining each column. Columns are themselves defined as an object with the properties:</p>\n<ul>\n<li><code class=\"language-text\">key</code> (string)<br>\nName of property present in the input records; required.</li>\n<li><code class=\"language-text\">header</code> (string)<br>\nValue to be printed in the first header line; to be used conjointly with the <code class=\"language-text\">header</code> option; default to <code class=\"language-text\">key</code>.</li>\n</ul>\n<p>Here is an <a href=\"https://github.com/adaltas/node-csv-stringify/blob/master/samples/option.columns_array_with_objects.js\">example</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token string\">'2'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  columns<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">{</span> key<span class=\"token operator\">:</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> key<span class=\"token operator\">:</span> <span class=\"token string\">'b'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  assert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token string\">'1,2\\n'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The order definition matters. Reverse the order of the column option in the above example to <code class=\"language-text\">[ { key: &#39;b&#39; }, { key: &#39;a&#39; } ]</code> will have the consequence to reverse the order of the generated CSV as <code class=\"language-text\">2,1\\n</code>.</p>\n<p>This example could have been simplified by defining the <a href=\"https://github.com/adaltas/node-csv-stringify/blob/master/samples/option.columns_array_with_strings.js\">column definitions as simple strings</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token string\">'2'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  columns<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span> <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  assert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token string\">'1,2\\n'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"undefined-properties\" style=\"position:relative;\"><a href=\"#undefined-properties\" aria-label=\"undefined properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Undefined properties</h2>\n<p>If a column is defined but it is not matching any properties in the data source, the value will be an empty string. If the data source defined a property which is not defined in the column option, the property will simply be disregarded. This is an <a href=\"https://github.com/adaltas/node-csv-stringify/blob/master/samples/option.columns_undefined.js\">example</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> year<span class=\"token operator\">:</span> <span class=\"token string\">'XXXX'</span><span class=\"token punctuation\">,</span> phone<span class=\"token operator\">:</span> <span class=\"token string\">'XXX XXXX'</span><span class=\"token punctuation\">,</span> nocolumn<span class=\"token operator\">:</span> <span class=\"token string\">'XXX'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> year<span class=\"token operator\">:</span> <span class=\"token string\">'YYYY'</span><span class=\"token punctuation\">,</span> phone<span class=\"token operator\">:</span> <span class=\"token string\">'YYY YYYY'</span><span class=\"token punctuation\">,</span> nocolumn<span class=\"token operator\">:</span> <span class=\"token string\">'YYY'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n  columns<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'phone'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'year'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'nofield'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  assert<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>\n    data<span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"XXX XXXX,XXXX,\\n\"</span> <span class=\"token operator\">+</span>\n    <span class=\"token string\">\"YYY YYYY,YYYY,\\n\"</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"Option columns","description":"List of properties when records are provided as objects","keywords":["csv","stringify","options","columns"]},"fields":{"edit_url":"https://github.com/adaltas/node-csv-docs/edit/master/src/md/stringify/options/columns.md","slug":"/stringify/options/columns/"}}},"pageContext":{}},"staticQueryHashes":["3308247434"]}